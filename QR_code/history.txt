//
//  main.cpp
//  QR_code
//
//  Created by 张涵健 on 2018/12/8.
//  Copyright © 2018 张涵健Coder.@. All rights reserved.
//
/*
#include "QR_detect.hpp"
using namespace cv;
using namespace std;



int main(int argc, char** argv) {
    //srand(2131231);
    Mat src = imread("QR_rotated.png");

    QR_detecter test;
    test.detect(src);
    test.showCorners(0.1);

    return 0;
}
*/
//______________________________________________________________________________________
// Program : OpenCV based QR code Detection and Retrieval
// Author  : Bharath Prabhuswamy
//______________________________________________________________________________________

/*
 * 潜在问题：
 * 1. 提取时可能出现旋转矩形越界问题
 * 2. 由真实图片转换过来的二维码，局限于正面拍摄识别（即image中的定位框必须是正方形的）
 * 3. 参考 https://github.com/bharathp666/opencv_qr.git
 */


//#include <opencv2/opencv.hpp>
#include <iostream>
#include <cmath>
#include <opencv2/opencv.hpp>

#include <zbar.h>

using namespace cv;
using namespace std;


Mat transformCorner(Mat &image, RotatedRect &rect, float larger = 1);
Mat check_fourth(Mat& img);

using namespace std;
using namespace cv;
using namespace zbar;
//g++ xxx.cpp -o xxx `pkg-config opencv --cflags --libs` -lzbar

int main()
{
    //get picture
    Mat combine,combine1,combine2;
    Mat a=imread("a.png",1);
    Mat b=imread("b.png",1);
    Mat c=imread("c.png",1);
    Mat d=imread("d.png",1);


    threshold(a, a, 0, 255, THRESH_BINARY);
    threshold(b, b, 0, 255, THRESH_BINARY);
    threshold(c, c, 0, 255, THRESH_BINARY);
    threshold(d, d, 0, 255, THRESH_BINARY);


    cvtColor(a, a, CV_RGB2GRAY);
    cvtColor(b, b, CV_RGB2GRAY);
    cvtColor(c, c, CV_RGB2GRAY);
    cvtColor(d, d, CV_RGB2GRAY);

    //resize
    resize(a,a,Size(200,200),0,0,INTER_LINEAR);
    resize(b,b,Size(200,200),0,0,INTER_LINEAR);
    resize(c,c,Size(200,200),0,0,INTER_LINEAR);
    resize(d,d,Size(200,200),0,0,INTER_LINEAR);

    //combine picture
    hconcat(a,b,combine1);//行排列   a+b=combine1
    hconcat(c,d,combine2);
    vconcat(combine1,combine2,combine);//列排列  combine1+combine2=combine
    namedWindow("Combine",CV_WINDOW_AUTOSIZE);
    imshow("Combine",combine);

    //adaptiveThreshold( combine, combine, 255, CV_ADAPTIVE_THRESH_MEAN_C, CV_THRESH_BINARY, 21,0);
    //threshold(combine, combine, 30, 200.0, CV_THRESH_OTSU + CV_THRESH_BINARY_INV);
    //============ratation test===================//
    /*Point2f src_center(combine.rows / 2.0,combine.cols / 2.0);
     Mat warp_mat = getRotationMatrix2D(src_center,45,0.75);//得到旋转矩阵，逆时针旋转45度，尺度缩放为1，即保持原尺寸
     warpAffine(combine,combine,warp_mat,combine.size());*/

    //===============识别二维码=====================//
    ImageScanner scanner;
    scanner.set_config(ZBAR_NONE, ZBAR_CFG_ENABLE, 1);
    int width1 = combine.cols;
    int height1 = combine.rows;  //get cols and rows
    uchar *raw = (uchar *)combine.data;
    Image imageZbar(width1, height1, "Y800", raw, width1 * height1);
    scanner.scan(imageZbar); //扫描条码
    Image::SymbolIterator symbol = imageZbar.symbol_begin();
    if(imageZbar.symbol_begin()==imageZbar.symbol_end())
    {
        cout<<"查询条码失败，请检查图片！"<<endl;
    }
    for(;symbol != imageZbar.symbol_end();++symbol)
    {
        cout<<"类型："<<endl<<symbol->get_type_name()<<endl<<endl;
        cout<<"条码："<<endl<<symbol->get_data()<<endl<<endl;
    }
    namedWindow("Source Window",0);
    imshow("Source Window",combine);
    waitKey();
    imageZbar.set_data(NULL,0);

    return 0;
}

// Start of Main Loop
//------------------------------------------------------------------------------------------------------------------------
/*
int main ( int argc, char **argv )
{

    VideoCapture cap(0);
    while(1){
        //Mat image = imread("4.png");
        Mat image;

        Mat qr,qr_raw,qr_gray,qr_thres;
        cap >> image;
        resize(image, image, Size(image.cols/2,image.rows/2));

        Mat tmp = check_fourth(image);

        if(image.empty()){ cerr << "ERR: Unable to find image.\n" << endl;
            return -1;
        }


        // Creation of Intermediate 'Image' Objects required later
        Mat gray(image.size(), CV_MAKETYPE(image.depth(), 1));            // To hold Grayscale Image
        Mat edges(image.size(), CV_MAKETYPE(image.depth(), 1));            // To hold Grayscale Image
        //Mat traces(image.size(), CV_8UC3);                                // For Debug Visuals


        vector<vector<Point> > contours;
        vector<Vec4i> hierarchy;

        int mark;
        int marks[100];

        //traces = Scalar(0,0,0);
        qr_raw = Mat::zeros(100, 100, CV_8UC3 );
        qr = Mat::zeros(100, 100, CV_8UC3 );
        qr_gray = Mat::zeros(100, 100, CV_8UC1);
        qr_thres = Mat::zeros(100, 100, CV_8UC1);

        // capture >> image;                // For Video input        // Capture Image from Image Input

        cvtColor(tmp,gray,CV_RGB2GRAY);        // Convert Image captured from Image Input to GrayScale
        Canny(gray, edges, 100 , 200, 3);        // Apply Canny edge detection on the gray image


        findContours( edges, contours, hierarchy, RETR_TREE, CHAIN_APPROX_SIMPLE); // Find contours with hierarchy


        for (int i = 0; i < contours.size(); i++){
            if (contourArea(contours[i])<400) continue;
            RotatedRect rect = minAreaRect(contours[i]);
            Mat qr_roi = transformCorner(image, rect, (float)24/27);
        }

        mark = 0;                                // Reset all detected marker count for this frame

        // Get Moments for all Contours and the mass centers
        vector<Moments> mu(contours.size());
        vector<Point2f> mc(contours.size());

        for( int i = 0; i < contours.size(); i++ )
        {    mu[i] = moments( contours[i], false );
            mc[i] = Point2f( mu[i].m10/mu[i].m00 , mu[i].m01/mu[i].m00 );
        }

        for( int i = 0; i < contours.size(); i++ )
        {
            int k=i;
            int c=0;

            while(hierarchy[k][2] != -1)
            {
                k = hierarchy[k][2] ;
                c = c+1;
            }
            if(hierarchy[k][2] != -1)
                c = c+1;

            if (c >= 5)
            {
                marks[mark] = i;        // i.e., A and B are already found, assign current contour to C
                mark = mark + 1 ;
            }
        }
        for(int i = 0; i <mark; i++){
            RotatedRect rect = minAreaRect(contours[marks[i]]);

            Mat qr_roi = transformCorner(image, rect,2);
            cvtColor(qr_roi, qr_roi, CV_BGR2GRAY);
            threshold(qr_roi, qr_roi, 100, 255, CV_THRESH_BINARY);
            imshow("roi"+to_string(i), qr_roi);
            waitKey(1);
            //imwrite("roi"+to_string(i), qr_roi);
            drawContours( image, contours, marks[i] , Scalar(255,200,0), 2, 8, hierarchy, 0 );
        }


        imshow ( "Image", image );
        //imshow ( "QR code", qr_thres );
        waitKey(1);
        //break;
    }

    return 0;
}
 */

Mat transformCorner(Mat &image, RotatedRect &rect, float larger ){
    Point2f points[4];
    Mat imag = image;
    rect.size.height = rect.size.height*larger;
    rect.size.width = rect.size.width*larger;
    rect.points(points);
    /*
     for (int i = 0; i < 4; i++)//画矩形
     line(imag, points[i], points[(i + 1) % 4], Scalar(255, 0, 0));
     */
    Point2f center = rect.center;//外接矩形中心点坐标
    Mat rot_mat = getRotationMatrix2D(center, rect.angle, 1.0);//求旋转矩阵
    Mat rot_image;
    Size dst_sz(image.size());
    warpAffine(image, rot_image, rot_mat, dst_sz);//原图像旋转
    int a,b,c,d;
    a = (center.x - (rect.size.width / 2) >= 0)? center.x - (rect.size.width / 2) : 0;
    b = (center.y - (rect.size.height/2) >= 0)? center.y - (rect.size.height/2):0;
    c = (a + rect.size.width < rot_image.cols)? c = rect.size.width : rot_image.cols-a;
    d = (b + rect.size.height < rot_image.rows)? d = rect.size.height : rot_image.rows-b;
    Mat result1 = rot_image(Rect(a, b, c, d));//提取ROI
    //cv::ellipse(image, rect, cv::Scalar(0, 255, 255), 2, 8);
    cv::Point2f* vertices = new cv::Point2f[4];
    rect.points(vertices);

    std::vector<cv::Point> contour;

    for (int i = 0; i < 4; i++)
    {
        contour.push_back(vertices[i]);
    }

    std::vector<std::vector<cv::Point>> contours;
    contours.push_back(contour);
    cv::drawContours(image, contours, 0, cv::Scalar(0, 0, 255), 1);

    return result1;
}

Mat check_fourth(Mat& img){

    Mat out;
    //获取自定义核
    Mat element = getStructuringElement(MORPH_RECT, Size(20, 20)); //第一个参数MORPH_RECT表示矩形的卷积核，当然还可以选择椭圆形的、交叉型的
    //腐蚀操作
    erode(img, out, element);

    return out;
}


